#include<stdio.h>
#define N 10
typedef struct
{
int process_id, arrival_time, burst_time, priority;
int q, ready;
}process_structure;
int Queue(int t1)
{

}
int main()
{
int n, count, time,temp_process, i,j,time_quantum;
process_structure temp;
printf("Enter Total Number of Processes:\t");
scanf("%d", &n);
process_structure process[n];
printf("Enter the time quantum ");
scanf("%d",&time_quantum);
for(count=0;count<n;count++)
{
printf("\nProcess ID:\t");
scanf("%d", &process[count].process_id);
printf("Arrival Time:\t");
scanf("%d", &process[count].arrival_time);
printf("Burst Time:\t");
scanf("%d", &process[count].burst_time);
printf("Process Priority:\t");
scanf("%d", &process[count].priority);
temp_process = process[count].priority;
process[count].q = Queue(temp_process);
process[count].ready = 0;
}
time=process[0].burst_time-time_quantum;
for(i=0;i<n;i++)
{
for(count=i;count<n;count++)
{
if(process[count].arrival_time<time)
{
process[count].ready=1;
}
}
for(count=i;count<n-1;count++)
{
for(j=count+1;j<n;j++)
{
if(process[count].ready==1&&process[j].ready==1)
{
if(process[count].q==2&&process[j].q==1)
{
temp=process[count];
process[count]=process[j];
process[j]=temp;
}
}
}
}
for(count=i;count<n-1;count++)
{
for(j=count+1;j<n;j++)
{
if(process[count].ready == 1 && process[j].ready == 1)
{
if(process[count].q == 1 && process[j].q == 1)
{
if(process[count].burst_time > process[j].burst_time)
{
temp = process[count];
process[count] = process[j];
process[j] = temp;
}
else
{
break;
}
}
}
}
}
printf("\nProcess[%d]:\tTime:\t%d To %d\n", process[i].process_id, time, time + process[i].burst_time);
time = time + process[i].burst_time;
for(count = i;count<n; count++)
{
if(process[count].ready == 1)
{
process[count].ready = 0;
}
}
}
int avg,totaltime;
printf(" total time in handling queries %d\n",time);
avg=time/n;
printf("avgerage time in handling quaries %d\n",avg);
return 0;
}
